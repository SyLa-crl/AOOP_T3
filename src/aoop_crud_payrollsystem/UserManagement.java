/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aoop_crud_payrollsystem;

/**
 *
 * @author Sylani
 */

import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

public class UserManagement extends javax.swing.JFrame {

    // Constants
    private static final String CSV_FILE_PATH = "MotorPHEmployeeData.csv";
    private static final String LOGIN_ATTEMPTS_FILE = "login_attempts.csv";
    private static final String EMPLOYEE_HOURS_FILE = "Employee_Hours_Worked.csv";
    private static final Logger LOGGER = Logger.getLogger(UserManagement.class.getName());
    
    // Reference to the actual table component created in initComponents
    private javax.swing.JTable jTableEmployeeList;
    

    /**
     * Creates new form UserManagement
     * @param employeeNumber
     * @throws java.io.FileNotFoundException
     * @throws com.opencsv.exceptions.CsvException
     */
public UserManagement(String employeeNumber) throws FileNotFoundException, IOException, CsvException {
    initComponents();
    // Use the employeeNumber parameter for filtering data or other purposes
    loadInitialData();
    configureUIComponents();
}

/**
 * Creates new form UserManagement
 * @throws java.io.FileNotFoundException
 * @throws com.opencsv.exceptions.CsvException
 */
public UserManagement() throws FileNotFoundException, IOException, CsvException {
    this("0"); // Call the parameterized constructor with a default value
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        Dashboard = new javax.swing.JButton();
        MotorPH = new javax.swing.JLabel();
        MainMenu = new javax.swing.JLabel();
        UserManagement = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        JTextFieldStatus = new javax.swing.JTextField();
        JTextFieldEmployeeNum = new javax.swing.JTextField();
        JTextFieldLastName = new javax.swing.JTextField();
        JTextFieldSSSnum = new javax.swing.JTextField();
        JTextFieldPagibigNum = new javax.swing.JTextField();
        JTextFieldTINnum = new javax.swing.JTextField();
        JTextFieldPhone = new javax.swing.JTextField();
        JTextFieldPhilhealthNum = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        JTextFieldSupervisor = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        JTextFieldRiceSubsidy = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        JTextFieldPhoneAllow = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        JTextFieldClothAllow = new javax.swing.JTextField();
        JTextFieldBasicSalary = new javax.swing.JTextField();
        jLabelBasicSalary = new javax.swing.JLabel();
        JTextFieldFirstName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTextAreaAddress = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        JTextFieldPosition = new javax.swing.JTextField();
        JDateChooserBirthday = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Clear = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        UpdateDatabase = new javax.swing.JButton();
        ViewEmployee = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        LeaveApplication = new javax.swing.JButton();
        ResetAttempts = new javax.swing.JButton();
        SignOut = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEmployeeList1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(204, 255, 204));

        Dashboard.setBackground(new java.awt.Color(204, 255, 204));
        Dashboard.setText("Dashboard");
        Dashboard.setBorder(null);
        Dashboard.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DashboardActionPerformed(evt);
            }
        });

        MotorPH.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        MotorPH.setText("MOTORPH ");

        MainMenu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MainMenu.setForeground(new java.awt.Color(102, 102, 102));
        MainMenu.setText("MAIN MENU");

        UserManagement.setBackground(new java.awt.Color(153, 255, 153));
        UserManagement.setText("User Management");
        UserManagement.setBorder(null);
        UserManagement.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        UserManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserManagementActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255, 0));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(1037, 364));
        jPanel1.setPreferredSize(new java.awt.Dimension(1037, 364));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Status");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, 22));

        jLabel3.setText("Employee No.");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        jLabel4.setText("Last Name");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 13, -1, -1));

        jLabel6.setText("Birthday");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 103, -1, -1));

        jLabel7.setText("SSS No.");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, -1, -1));

        jLabel8.setText("Phone Number");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 73, -1, -1));

        jLabel9.setText("PhilHealth No.");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, -1, -1));

        jLabel10.setText("TIN");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, -1));

        jLabel11.setText("Pagibig No.");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, -1));

        JTextFieldStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldStatus.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldStatusActionPerformed(evt);
            }
        });
        jPanel1.add(JTextFieldStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 190, 22));

        JTextFieldEmployeeNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldEmployeeNum.setCaretColor(new java.awt.Color(51, 51, 51));
        JTextFieldEmployeeNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldEmployeeNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldEmployeeNumActionPerformed(evt);
            }
        });
        JTextFieldEmployeeNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldEmployeeNumKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldEmployeeNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 190, 22));

        JTextFieldLastName.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldLastName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldLastNameActionPerformed(evt);
            }
        });
        jPanel1.add(JTextFieldLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 190, 22));
        JTextFieldLastName.getAccessibleContext().setAccessibleName("LastName");

        JTextFieldSSSnum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldSSSnum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldSSSnum.setName(""); // NOI18N
        JTextFieldSSSnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldSSSnumActionPerformed(evt);
            }
        });
        JTextFieldSSSnum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldSSSnumKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldSSSnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 190, 22));

        JTextFieldPagibigNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldPagibigNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldPagibigNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldPagibigNumKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldPagibigNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 190, 22));

        JTextFieldTINnum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldTINnum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldTINnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldTINnumActionPerformed(evt);
            }
        });
        JTextFieldTINnum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldTINnumKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldTINnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 190, 22));

        JTextFieldPhone.setEditable(false);
        JTextFieldPhone.setBackground(new java.awt.Color(255, 255, 255));
        JTextFieldPhone.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldPhone.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldPhoneActionPerformed(evt);
            }
        });
        jPanel1.add(JTextFieldPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 190, 22));

        JTextFieldPhilhealthNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldPhilhealthNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldPhilhealthNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldPhilhealthNumActionPerformed(evt);
            }
        });
        JTextFieldPhilhealthNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldPhilhealthNumKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldPhilhealthNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 80, 190, 22));

        jLabel14.setText("Immediate Supervisor");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        JTextFieldSupervisor.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldSupervisor.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldSupervisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldSupervisorActionPerformed(evt);
            }
        });
        jPanel1.add(JTextFieldSupervisor, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, 190, 22));

        jLabel15.setText("Rice Subsidy");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, -1, -1));

        JTextFieldRiceSubsidy.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldRiceSubsidy.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldRiceSubsidy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldRiceSubsidyKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldRiceSubsidy, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, 190, 22));
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 372, -1, -1));

        jLabel17.setText("Phone Allowance");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, -1, -1));

        JTextFieldPhoneAllow.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldPhoneAllow.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldPhoneAllow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldPhoneAllowKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldPhoneAllow, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 240, 190, 22));

        jLabel19.setText("Clothing  Allowance");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, -1, -1));

        JTextFieldClothAllow.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldClothAllow.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldClothAllow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldClothAllowActionPerformed(evt);
            }
        });
        JTextFieldClothAllow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldClothAllowKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldClothAllow, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 300, 190, 22));

        JTextFieldBasicSalary.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldBasicSalary.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldBasicSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldBasicSalaryActionPerformed(evt);
            }
        });
        JTextFieldBasicSalary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JTextFieldBasicSalaryKeyTyped(evt);
            }
        });
        jPanel1.add(JTextFieldBasicSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, 190, 22));

        jLabelBasicSalary.setText("Basic Salary");
        jPanel1.add(jLabelBasicSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, -1, -1));

        JTextFieldFirstName.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldFirstName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldFirstNameActionPerformed(evt);
            }
        });
        jPanel1.add(JTextFieldFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 190, 22));

        jLabel5.setText("First Name");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 43, -1, -1));

        jLabel20.setText("Address");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 158, -1, -1));

        JTextAreaAddress.setColumns(20);
        JTextAreaAddress.setLineWrap(true);
        JTextAreaAddress.setRows(5);
        JTextAreaAddress.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextAreaAddress.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jScrollPane1.setViewportView(JTextAreaAddress);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 190, 56));

        jLabel18.setText("Positon");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        JTextFieldPosition.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JTextFieldPosition.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        JTextFieldPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextFieldPositionActionPerformed(evt);
            }
        });
        jPanel1.add(JTextFieldPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 190, 22));

        JDateChooserBirthday.setBackground(new java.awt.Color(255, 255, 255));
        JDateChooserBirthday.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        JDateChooserBirthday.setToolTipText("");
        JDateChooserBirthday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JDateChooserBirthdayKeyTyped(evt);
            }
        });
        jPanel1.add(JDateChooserBirthday, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 190, 30));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 0, 51));
        jLabel12.setText("* All fields are required.");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 370, -1, -1));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Clear.setText("CLEAR");
        Clear.setBorder(null);
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        jPanel2.add(Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 180, 40));

        Add.setText("ADD");
        Add.setBorder(null);
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        jPanel2.add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 180, 40));

        Update.setText("UPDATE");
        Update.setBorder(null);
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanel2.add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 180, 40));

        Delete.setText("DELETE");
        Delete.setBorder(null);
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPanel2.add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 180, 40));

        UpdateDatabase.setText("UPDATE DATABASE");
        UpdateDatabase.setBorder(null);
        UpdateDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateDatabaseActionPerformed(evt);
            }
        });
        jPanel2.add(UpdateDatabase, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 180, 40));

        ViewEmployee.setText("VIEW EMPLOYEE");
        ViewEmployee.setBorder(null);
        ViewEmployee.setBorderPainted(false);
        ViewEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewEmployeeActionPerformed(evt);
            }
        });
        jPanel2.add(ViewEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 180, 40));

        Save.setText("SAVE");
        Save.setBorder(null);
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jPanel2.add(Save, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 180, 40));

        LeaveApplication.setText("LEAVE APPLICATION");
        LeaveApplication.setBorder(null);
        LeaveApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeaveApplicationActionPerformed(evt);
            }
        });
        jPanel2.add(LeaveApplication, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 180, 40));

        ResetAttempts.setText("RESET SIGN IN ATTEMPTS");
        ResetAttempts.setBorder(null);
        ResetAttempts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetAttemptsActionPerformed(evt);
            }
        });
        jPanel2.add(ResetAttempts, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 180, 40));

        SignOut.setText("Sign Out");
        SignOut.setBorder(null);
        SignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignOutActionPerformed(evt);
            }
        });
        jPanel2.add(SignOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 180, 40));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255, 0));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        jTableEmployeeList1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee", "Last Name", "First Name", "Birthday", "Address", "Phone Number", "SSS #", "Philhealth #", "TIN ", "Pag-ibig #", "Status", "Position", "Immediate Supervisor", "Basic Salary", "Rice Subsidy", "Phone Allowance", "Clothing Allowance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmployeeList1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableEmployeeList1.setAutoscrolls(false);
        jTableEmployeeList1.getTableHeader().setReorderingAllowed(false);
        jTableEmployeeList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmployeeList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEmployeeList1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MotorPH)
                    .addComponent(MainMenu)
                    .addComponent(UserManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(MotorPH)
                .addGap(36, 36, 36)
                .addComponent(MainMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 626, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Initialize data and load from CSV
     */
    private void loadInitialData() throws IOException, CsvException {
        csvRun(CSV_FILE_PATH);
        textFieldEditSetting(false);
    }
    
    /**
     * Configure UI components with validation and settings
     */
    private void configureUIComponents() {
        setupPhoneNumberValidation();
        resetButtonColors();
        
    }
  

    /**
     * Load CSV data and populate the employee table
     * 
     * @param csvFile Path to the CSV file
     */
    private void csvRun(String csvFile) throws FileNotFoundException, IOException, CsvException {
        try {
            List<String[]> records = FileHandling.readCSV(csvFile);
            List<Employee> employees = parseRecords(records);
            informationTable(employees);
        } catch (FileNotFoundException e) {
            LOGGER.log(Level.SEVERE, "CSV file not found: {0}", csvFile);
            JOptionPane.showMessageDialog(this,
                "Employee data file not found. A new file will be created when you save.",
                "File Not Found",
                JOptionPane.WARNING_MESSAGE);
            // Create empty table structure
            informationTable(new ArrayList<>());
        } catch (IOException | CsvException e) {
            LOGGER.log(Level.SEVERE, "Error reading CSV file: {0}", e.getMessage());
            throw e; // Re-throw to caller
        }
    }

    /**
     * Parse CSV records into Employee objects
     * 
     * @param records List of CSV record arrays
     * @return List of Employee objects
     */
    public static List<Employee> parseRecords(List<String[]> records) {
        List<Employee> employees = new ArrayList<>();
        
        for (String[] record : records) {
            // Skip header row if present
            if (record[0].equals("Employee") || record[0].equalsIgnoreCase("employeeNumber")) {
                continue;
            }
            
            try {
                String employeeNumber = record[0];
                String lastName = record[1];
                String firstName = record[2];
                String employeeBirthday = record[3];
                String address = record[4];
                String phoneNumber = record[5];
                String sssNumber = record[6];
                String philHealthNumber = record[7];
                String tinNumber = record[8];
                String pagIbigNumber = record[9];
                String status = record[10];
                String position = record[11];
                String immediateSupervisor = record[12];
                String basicSalary = record[13];
                String riceSubsidy = record[14];
                String phoneAllowance = record[15];
                String clothingAllowance = record[16];

                Employee employee = new Employee(
                    employeeNumber, lastName, firstName, employeeBirthday, 
                    address, phoneNumber, sssNumber, philHealthNumber, 
                    tinNumber, pagIbigNumber, status, position, 
                    immediateSupervisor, basicSalary, riceSubsidy, 
                    phoneAllowance, clothingAllowance
                );
                
                employees.add(employee);
            } catch (ArrayIndexOutOfBoundsException e) {
                LOGGER.log(Level.WARNING, "Skipping malformed record: {0}", e.getMessage());
                // Skip malformed records instead of failing
            }
        }

        return employees;
    }

    /**
     * Converts various date formats to a Date object
     * 
     * @param dateObj The date object to be converted (String or Date)
     * @return A Date object representing the input
     */
    public Date convertToDate(Object dateObj) {
        try {
            if (dateObj == null) {
                return null;
            }
            
            if (dateObj instanceof Date) {
                return (Date) dateObj;
            } else if (dateObj instanceof String) {
                String dateStr = ((String) dateObj).trim();
                if (dateStr.isEmpty()) {
                    return null;
                }
                
                // Try different date formats that might be used in your application
                SimpleDateFormat[] formats = {
                    new SimpleDateFormat("MM/dd/yyyy"),
                    new SimpleDateFormat("yyyy-MM-dd"),
                    new SimpleDateFormat("dd/MM/yyyy")
                };
                
                for (SimpleDateFormat format : formats) {
                    try {
                        format.setLenient(false); // Strict parsing
                        return format.parse(dateStr);
                    } catch (ParseException e) {
                        // Try the next format
                    }
                }
                
                // If we get here, none of the formats worked
                JOptionPane.showMessageDialog(this, 
                    "Could not parse date: " + dateStr, 
                    "Date Format Error", 
                    JOptionPane.ERROR_MESSAGE);
                return null;
            }
            
            JOptionPane.showMessageDialog(this, 
                "Unsupported date type: " + dateObj.getClass().getName(), 
                "Date Format Error", 
                JOptionPane.ERROR_MESSAGE);
            return null;
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error converting date", e);
            JOptionPane.showMessageDialog(this, 
                "Error converting date: " + e.getMessage(), 
                "Date Error", 
                JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * Populate the table with employee data
     * 
     * @param employees List of Employee objects to display
     */
    private void informationTable(List<Employee> employees) {
        DefaultTableModel tableModel = (DefaultTableModel) jTableEmployeeList.getModel();
        tableModel.setRowCount(0); // Clear existing rows
        
        for (Employee employee : employees) {
            // Format the ID numbers to ensure they're displayed as full strings
            String sssFormatted = formatIdNumber(employee.getSssNumber());
            String philHealthFormatted = formatIdNumber(employee.getPhilHealthNumber());
            String tinFormatted = formatIdNumber(employee.getTinNumber());
            String pagIbigFormatted = formatIdNumber(employee.getPagIbigNumber());
            
            tableModel.addRow(new Object[]{
                employee.getEmployeeNumber(),
                employee.getLastName(),
                employee.getFirstName(),
                employee.getEmployeeBirthday(),
                employee.getAddress(),
                employee.getPhoneNumber(),
                sssFormatted,
                philHealthFormatted,
                tinFormatted,
                pagIbigFormatted,
                employee.getStatus(),
                employee.getPosition(),
                employee.getImmediateSupervisor(),
                employee.getBasicSalary(),
                employee.getRiceSubsidy(),
                employee.getPhoneAllowance(),
                employee.getClothingAllowance()}
            );
        }
    }

    /**
     * Helper method to ensure ID numbers are displayed correctly
     * 
     * @param idNumber The ID number string to format
     * @return Formatted ID number
     */
    private String formatIdNumber(String idNumber) {
        if (idNumber == null || idNumber.isEmpty()) {
            return "";
        }
        
        try {
            // If it can be parsed as a number, format it without scientific notation
            if (idNumber.matches(".*\\d.*")) {
                return String.format("%s", idNumber.replaceAll("[^0-9-]", ""));
            }
        } catch (Exception e) {
            LOGGER.log(Level.FINE, "Error formatting ID number: {0}", e.getMessage());
            // If any error occurs, just return the original string
        }
        return idNumber;
    }

    /**
     * Limit key input to only digits
     * 
     * @param evt KeyEvent to filter
     */
    public static void allowOnlyDigits(KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }

    /**
     * Limit key input to only digits and special characters
     * 
     * @param evt KeyEvent to filter
     */
    public static void allowOnlyDigitsSpecial(KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '-') {
            evt.consume();
        }
    }

    /**
     * Limit key input to only date-related characters
     * 
     * @param evt KeyEvent to filter
     */
    public static void allowOnlyDate(KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '/' && c != '-' && c != '.') {
            evt.consume();
        }
    }

    /**
     * Create a list of all employee IDs in the table
     * 
     * @return List of employee IDs
     */
    public List<String> createTableIdList() {
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        List<String> tableIdList = new ArrayList<>();

        for (int i = 0; i < model.getRowCount(); i++) {
            Object idObj = model.getValueAt(i, 0);
            if (idObj != null) {
                String id = idObj.toString();
                tableIdList.add(id);
            }
        }
        return tableIdList;
    }

    /**
     * Check if an employee ID is unique
     * 
     * @param tableIdList List of existing employee IDs
     * @return true if unique, false if duplicate
     */
    public boolean isUniqueEmployeeId(List<String> tableIdList) {
        String newEmployeeId = JTextFieldEmployeeNum.getText().trim();
        
        if (newEmployeeId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Employee ID cannot be empty");
            return false;
        }

        for (String existingId : tableIdList) {
            if (existingId.equals(newEmployeeId)) {
                JOptionPane.showMessageDialog(this, "ID number already exists");
                return false;
            }
        }
        return true;
    }

    /**
     * Add a new employee to the table
     */
    public void addEmployee() {
        // Verify all fields are filled
        if (!checkEntries()) {
            return;
        }
        
        List<String> tableIdList = createTableIdList();
        boolean isUnique = isUniqueEmployeeId(tableIdList);

        if (isUnique) {
            DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();

            model.addRow(new Object[]{
                JTextFieldEmployeeNum.getText(),
                JTextFieldLastName.getText(),
                JTextFieldFirstName.getText(),
                formatDate(JDateChooserBirthday.getDate()),
                JTextAreaAddress.getText(),
                JTextFieldPhone.getText(),
                JTextFieldSSSnum.getText(),
                JTextFieldPhilhealthNum.getText(),
                JTextFieldTINnum.getText(),
                JTextFieldPagibigNum.getText(),
                JTextFieldStatus.getText(),
                JTextFieldPosition.getText(),
                JTextFieldSupervisor.getText(),
                JTextFieldBasicSalary.getText(),
                JTextFieldRiceSubsidy.getText(),
                JTextFieldPhoneAllow.getText(),
                JTextFieldClothAllow.getText()});

            JOptionPane.showMessageDialog(this, "Employee added successfully!");
            clearTextField();
            textFieldEditSetting(false);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add employee", "Duplicate ID", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * Update an existing employee record
     */
    public void updateEmployee() {
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();
        
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select an employee to update first.", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Ask if user wants to proceed with updating the information of the employee
        int response = JOptionPane.showConfirmDialog(this, 
            "Do you want to proceed with updating the entry?",
            "Update Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        // JOptionPane returns: 1 = No, 0 = Yes
        // Check the user's response
        if (response == JOptionPane.YES_OPTION) {
            // Verify all fields are filled
            if (!checkEntries()) {
                return;
            }
            
            try {
                DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
                
                model.setValueAt(JTextFieldEmployeeNum.getText(), selectedRowIndex, 0);
                model.setValueAt(JTextFieldLastName.getText(), selectedRowIndex, 1);
                model.setValueAt(JTextFieldFirstName.getText(), selectedRowIndex, 2);
                model.setValueAt(formatDate(JDateChooserBirthday.getDate()), selectedRowIndex, 3);
                model.setValueAt(JTextAreaAddress.getText(), selectedRowIndex, 4);
                model.setValueAt(JTextFieldPhone.getText(), selectedRowIndex, 5);
                model.setValueAt(JTextFieldSSSnum.getText(), selectedRowIndex, 6);
                model.setValueAt(JTextFieldPhilhealthNum.getText(), selectedRowIndex, 7);
                model.setValueAt(JTextFieldTINnum.getText(), selectedRowIndex, 8);
                model.setValueAt(JTextFieldPagibigNum.getText(), selectedRowIndex, 9);
                model.setValueAt(JTextFieldStatus.getText(), selectedRowIndex, 10);
                model.setValueAt(JTextFieldPosition.getText(), selectedRowIndex, 11);
                model.setValueAt(JTextFieldSupervisor.getText(), selectedRowIndex, 12);
                model.setValueAt(JTextFieldBasicSalary.getText(), selectedRowIndex, 13);
                model.setValueAt(JTextFieldRiceSubsidy.getText(), selectedRowIndex, 14);
                model.setValueAt(JTextFieldPhoneAllow.getText(), selectedRowIndex, 15);
                model.setValueAt(JTextFieldClothAllow.getText(), selectedRowIndex, 16);

                JOptionPane.showMessageDialog(this, "Employee information updated successfully");
                textFieldEditSetting(false);
            } catch (Exception e) {
                LOGGER.log(Level.SEVERE, "Error updating employee", e);
                JOptionPane.showMessageDialog(this, 
                    "Error updating employee: " + e.getMessage(), 
                    "Update Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * Delete an employee record
     */
    public void deleteEmployee() {
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();
        
        // Check if a row is actually selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select an employee to delete first.", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Ask for confirmation
        int response = JOptionPane.showConfirmDialog(this, 
            "Do you want to proceed with deleting the entry?",
            "Delete Entry Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        // If user confirms deletion
        if (response == JOptionPane.YES_OPTION) {
            try {
                // Get the table model
                DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
                
                // Get employee info for confirmation message
                String empNum = model.getValueAt(selectedRowIndex, 0).toString();
                String empName = model.getValueAt(selectedRowIndex, 1).toString() + ", " + 
                                model.getValueAt(selectedRowIndex, 2).toString();
                
                // Remove the row
                model.removeRow(selectedRowIndex);
                
                // Show success message with employee details
                JOptionPane.showMessageDialog(this, 
                    "Employee " + empNum + " (" + empName + ") deleted successfully",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                
                // Clear the text fields after deletion
                clearTextField();
            } catch (HeadlessException e) {
                // Log and show error if deletion fails
                LOGGER.log(Level.SEVERE, "Error deleting employee", e);
                JOptionPane.showMessageDialog(this, 
                    "Failed to delete employee: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Reset the text field edit settings
        textFieldEditSetting(false);
    }

    /**
     * Reset login attempts for a specific user
     * 
     * @param username The username to reset attempts for
     */
    private void resetLoginAttemptsForUser(String username) {
        Map<String, Integer> userAttempts = new HashMap<>();
        
        // First load all current attempts
        File file = new File(LOGIN_ATTEMPTS_FILE);
        
        if (!file.exists()) {
            try {
                // Create file if it doesn't exist
                boolean created = file.createNewFile();
                if (!created) {
                    throw new IOException("Could not create login attempts file");
                }
                
                // Create header
                try (FileWriter writer = new FileWriter(file)) {
                    writer.write("username,attempts\n");
                }
            } catch (IOException e) {
                LOGGER.log(Level.SEVERE, "Error creating login attempts file", e);
                JOptionPane.showMessageDialog(this, 
                    "Failed to create login attempts file: " + e.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            boolean isFirstLine = true;
            
            while ((line = reader.readLine()) != null) {
                // Skip the header
                if (isFirstLine) {
                    isFirstLine = false;
                    continue;
                }
                
                String[] parts = line.split(",");
                if (parts.length >= 2) {
                    String user = parts[0];
                    try {
                        int attempts = Integer.parseInt(parts[1]);
                        // Only keep users other than the one we're resetting
                        if (!user.equalsIgnoreCase(username)) {
                            userAttempts.put(user, attempts);
                        }
                    } catch (NumberFormatException e) {
                        // Skip invalid entries
                        LOGGER.log(Level.WARNING, "Invalid login attempts entry: {0}", line);
                    }
                }
            }
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE,
                "Error reading login attempts file", e);
            JOptionPane.showMessageDialog(this, 
                "Error reading login attempts file: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Now write back the updated data
        try (FileWriter writer = new FileWriter(LOGIN_ATTEMPTS_FILE, false)) { // Overwrite
            // Write header
            writer.write("username,attempts\n");
            
            // Write data
            for (Map.Entry<String, Integer> entry : userAttempts.entrySet()) {
                writer.write(entry.getKey() + "," + entry.getValue() + "\n");
            }
            
            JOptionPane.showMessageDialog(this, 
                "Login attempts reset for user: " + username, 
                "Reset Successful", 
                JOptionPane.INFORMATION_MESSAGE);
                
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE,
                "Failed to save login attempts", e);
            JOptionPane.showMessageDialog(this, 
                "Failed to reset login attempts: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Find the highest employee ID in the table
     * 
     * @return Highest employee ID
     */
    public int determineLastEmployeeId() {
        ArrayList<Integer> list = new ArrayList<>();
        int rowCount = jTableEmployeeList.getRowCount();
        
        if (rowCount == 0) {
            return 0; // Return 0 if no employees exist
        }

        for (int i = 0; i < rowCount; i++) {
            try {
                Object value = jTableEmployeeList.getValueAt(i, 0);
                if (value != null) {
                    list.add(Integer.valueOf(value.toString()));
                }
            } catch (NumberFormatException e) {
                // Skip invalid numbers
                LOGGER.log(Level.WARNING, 
                    "Invalid employee ID at row " + i, e);
            }
        }
        
        if (list.isEmpty()) {
            return 0;
        }

        // Sorting the ArrayList in descending order
        Collections.sort(list, Collections.reverseOrder());

        return list.get(0);
    }

    /**
     * Generate a new unique employee ID
     * 
     * @return New employee ID
     */
    public int generateUniqueId() {
        int lastEmployeeID = determineLastEmployeeId();
        return lastEmployeeID + 1;
    }

    /**
     * Clear all text fields
     */
    public void clearTextField() {
        JTextFieldStatus.setText("");
        JTextFieldEmployeeNum.setText("");
        JTextFieldLastName.setText("");
        JTextFieldFirstName.setText("");
        JDateChooserBirthday.setDate(null);
        JTextFieldPhone.setText("");
        JTextAreaAddress.setText("");
        JTextFieldPosition.setText("");
        JTextFieldSupervisor.setText("");
        JTextFieldSSSnum.setText("");
        JTextFieldPhilhealthNum.setText("");
        JTextFieldPagibigNum.setText("");
        JTextFieldTINnum.setText("");
        JTextFieldBasicSalary.setText("");
        JTextFieldRiceSubsidy.setText("");
        JTextFieldPhoneAllow.setText("");
        JTextFieldClothAllow.setText("");
    }

    /**
     * Set editability of text fields
     * 
     * @param condition true to enable editing, false to disable
     */
    public void textFieldEditSetting(boolean condition) {
        JTextFieldEmployeeNum.setEnabled(false); // Always disabled
        JTextFieldLastName.setEnabled(condition);
        JTextFieldFirstName.setEnabled(condition);
        JDateChooserBirthday.setEnabled(condition);
        JTextAreaAddress.setEnabled(condition);
        JTextFieldPhone.setEnabled(condition); // Now controlled by the parameter
        JTextFieldPhone.setEditable(condition); // Sync editability with enabled state
        JTextFieldSSSnum.setEnabled(condition);
        JTextFieldPhilhealthNum.setEnabled(condition);
        JTextFieldTINnum.setEnabled(condition);
        JTextFieldPagibigNum.setEnabled(condition);
        JTextFieldStatus.setEnabled(condition);
        JTextFieldPosition.setEnabled(condition);
        JTextFieldSupervisor.setEnabled(condition);
        JTextFieldBasicSalary.setEnabled(condition);
        JTextFieldRiceSubsidy.setEnabled(condition);
        JTextFieldPhoneAllow.setEnabled(condition);
        JTextFieldClothAllow.setEnabled(condition);
    }    // Set disabled text color for better visibility


    /**
     * Check if all required fields are filled
     * 
     * @return true if all fields are filled, false otherwise
     */
    private boolean checkEntries() {
        if (isEmpty(JTextAreaAddress.getText())
                || isEmpty(JTextFieldBasicSalary.getText())
                || JDateChooserBirthday.getDate() == null
                || isEmpty(JTextFieldClothAllow.getText())
                || isEmpty(JTextFieldEmployeeNum.getText())
                || isEmpty(JTextFieldFirstName.getText())
                || isEmpty(JTextFieldLastName.getText())
                || isEmpty(JTextFieldPagibigNum.getText())
                || isEmpty(JTextFieldPhilhealthNum.getText())
                || isEmpty(JTextFieldPhoneAllow.getText())
                || isEmpty(JTextFieldPhone.getText())
                || isEmpty(JTextFieldPosition.getText())
                || isEmpty(JTextFieldRiceSubsidy.getText())
                || isEmpty(JTextFieldSSSnum.getText())
                || isEmpty(JTextFieldStatus.getText())
                || isEmpty(JTextFieldSupervisor.getText())
                || isEmpty(JTextFieldTINnum.getText())) {

            JOptionPane.showMessageDialog(this, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            return false; // Indicate that not all fields are filled
        }
        
        // Add additional validation for phone number
        if (JTextFieldPhone.getText().trim().length() != 11) {
            JOptionPane.showMessageDialog(this, 
                "Phone number must be exactly 11 digits", 
                "Validation Error", 
                JOptionPane.ERROR_MESSAGE);
            JTextFieldPhone.requestFocus();
            return false;
        }
        
        return true; // Indicate that all fields are filled
    }

    /**
     * Check if a string is empty
     * 
     * @param text String to check
     * @return true if empty, false otherwise
     */
    public boolean isEmpty(String text) {
        return text == null || text.trim().isEmpty();
    }

    /**
     * Format a date object to string
     * 
     * @param date Date to format
     * @return Formatted date string
     */
    public static String formatDate(Date date) {
        if (date == null) {
            return "";
        }
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        return dateFormat.format(date);
    }

    /**
     * Set up validation for phone number field
     */
    private void setupPhoneNumberValidation() {
        // Set document filter to allow only digits and max 11 characters
        ((javax.swing.text.AbstractDocument) JTextFieldPhone.getDocument()).setDocumentFilter(
            new javax.swing.text.DocumentFilter() {
                @Override
                public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, javax.swing.text.AttributeSet attrs) throws BadLocationException {
                    String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
                    String newText = currentText.substring(0, offset) + text + currentText.substring(offset + length);
                    
                    // Only allow digits
                    if (!text.matches("\\d*")) {
                        return;
                    }
                    
                    // Check if the new length would be <= 11
                    if (newText.length() <= 11) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
                
                @Override
                public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, javax.swing.text.AttributeSet attr) throws BadLocationException {
                    String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
                    String newText = currentText.substring(0, offset) + text + currentText.substring(offset);
                    
                    // Only allow digits
                    if (!text.matches("\\d*")) {
                        return;
                    }
                    
                    // Check if the new length would be <= 11
                    if (newText.length() <= 11) {
                        super.insertString(fb, offset, text, attr);
                    }
                }
            }
        );
        
        // Add an input verifier to check for exactly 11 digits when focus is lost
        JTextFieldPhone.setInputVerifier(new javax.swing.InputVerifier() {
            @Override
            public boolean verify(javax.swing.JComponent input) {
                JTextField field = (JTextField) input;
                String text = field.getText();
                
                if (!text.isEmpty() && text.length() != 11) {
                    JOptionPane.showMessageDialog(
                        null,
                        "Phone number must be exactly 11 digits.",
                        "Invalid Input",
                        JOptionPane.ERROR_MESSAGE
                    );
                    return false;
                }
                return true;
            }
        });
    }
    
    /**
     * Reset button colors to default
     */
    private void resetButtonColors() {
        Dashboard.setBackground(new Color(204, 255, 204));
        Dashboard.setForeground(Color.BLACK);
        UserManagement.setBackground(new Color(204, 255, 204));
        UserManagement.setForeground(Color.BLACK);
    }
    
    /**
     * Show the dashboard form
     */
    private void showDashboard() throws IOException, FileNotFoundException, CsvException {
        // Open the dashboard form
        UserManagement dashboard = new UserManagement();
        dashboard.setVisible(true);
        this.dispose(); // Close current window
    }
     /**
     * Export table data to CSV
     */
    private void exportTableToCSV() {
        int response = JOptionPane.showConfirmDialog(this, 
            "Do you want to proceed with saving the changes to the database?",
            "Update Database Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            try {
                FileHandling.exportTableToCSV(jTableEmployeeList);
                JOptionPane.showMessageDialog(this,
                    "Database updated successfully",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
            } catch (HeadlessException e) {
                LOGGER.log(Level.SEVERE, "Error exporting to CSV", e);
                JOptionPane.showMessageDialog(this,
                    "Error updating database: " + e.getMessage(),
                    "Export Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * Handle view employee action
     */
    private void viewEmployeeDetails() {
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select an employee from the list first.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Check if the necessary files exist before creating the PayrollProcessing frame
            File employeeHoursFile = new File(EMPLOYEE_HOURS_FILE);
            if (!employeeHoursFile.exists()) {
                // Create the parent directory if it doesn't exist
                if (employeeHoursFile.getParentFile() != null) {
                    employeeHoursFile.getParentFile().mkdirs();
                }

                // Create an empty CSV file with headers
                try (CSVWriter writer = new CSVWriter(new FileWriter(employeeHoursFile))) {
                    String[] headers = {"employeeNumber", "date", "timeIn", "timeOut", "hoursWorked"};
                    writer.writeNext(headers);
                    LOGGER.log(Level.INFO, "Created Employee_Hours_Worked.csv file");
                }
            }

            // Now try to create the PayrollProcessing frame
            Finance_HR_PayrollProcessing viewEmployeeFrame = new Finance_HR_PayrollProcessing();

            // Display the window
            viewEmployeeFrame.setVisible(true);
            viewEmployeeFrame.pack();
            viewEmployeeFrame.setDefaultCloseOperation(Finance_HR_PayrollProcessing.DISPOSE_ON_CLOSE);

            // Display the data in viewEmployeeFrame
            viewEmployeeFrame.jTextFieldEmployeeNum.setText(model.getValueAt(selectedRowIndex, 0).toString());
            viewEmployeeFrame.jTextFieldLastName.setText(model.getValueAt(selectedRowIndex, 1).toString());
            viewEmployeeFrame.jTextFieldFirstName.setText(model.getValueAt(selectedRowIndex, 2).toString());
            viewEmployeeFrame.jTextFieldBasicSalary.setText(model.getValueAt(selectedRowIndex, 13).toString());

            //Benefits
            try {
                double riceSubsidy = Double.parseDouble(model.getValueAt(selectedRowIndex, 14).toString());
                double phoneAllowance = Double.parseDouble(model.getValueAt(selectedRowIndex, 15).toString());
                double clothingAllowance = Double.parseDouble(model.getValueAt(selectedRowIndex, 16).toString());
                double totalBenefits = riceSubsidy + phoneAllowance + clothingAllowance;
                String formattedTotalBenefits = String.format("%.2f", totalBenefits);
                viewEmployeeFrame.jTextFieldBenefits.setText(formattedTotalBenefits);
            } catch (NumberFormatException e) {
                // Handle case where benefits data is not valid numbers
                viewEmployeeFrame.jTextFieldBenefits.setText("0.00");
                LOGGER.log(Level.WARNING, "Error calculating benefits: {0}", e.getMessage());
            }

        } catch (FileNotFoundException | CsvException ex) {
            LOGGER.log(Level.SEVERE, "Error loading employee data", ex);
            JOptionPane.showMessageDialog(this,
                "Error loading employee data: " + ex.getMessage(),
                "Data Error",
                JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, "I/O Error", ex);
            JOptionPane.showMessageDialog(this,
                "I/O Error: " + ex.getMessage(),
                "File Error",
                JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            LOGGER.log(Level.SEVERE, "Unexpected error", ex);
            JOptionPane.showMessageDialog(this,
                "Unexpected error: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Open leave application form
     */
    private void openLeaveApplication() {
        try {
            HR_LeaveApplication leaveEmployee = new HR_LeaveApplication();
            
            // Display the window
            leaveEmployee.setVisible(true);
            leaveEmployee.pack();
            leaveEmployee.setDefaultCloseOperation(Finance_HR_PayrollProcessing.DISPOSE_ON_CLOSE);

        } catch (IOException | CsvException ex) {
            LOGGER.log(Level.SEVERE, "Error opening Leave Application", ex);
            JOptionPane.showMessageDialog(this, 
                "Error opening Leave Application: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Handle sign out action
     */
    private void handleSignOut() {
        int response = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to sign out?",
            "Confirm Sign Out",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (response == JOptionPane.YES_OPTION) {
            try {
                WindowUtils.switchToWindow(this, new LoginManager());
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, "Error signing out", ex);
                JOptionPane.showMessageDialog(this,
                    "Error signing out: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /**
     * Handle reset login attempts action
     */
    private void handleResetLoginAttempts() {
        int selectedRow = jTableEmployeeList.getSelectedRow();
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "Please select an employee first",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Assuming the username is the same as lastName (adjust as needed)
        String lastName = jTableEmployeeList.getValueAt(selectedRow, 1).toString().toLowerCase();
        
        // Confirm before resetting
        int response = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to reset sign-in attempts for " + lastName + "?",
            "Confirm Reset", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
            
        if (response == JOptionPane.YES_OPTION) {
            resetLoginAttemptsForUser(lastName);
        }
    
    }
    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        clearTextField();
        textFieldEditSetting(false);
    
    }//GEN-LAST:event_ClearActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        clearTextField();
        String newEmployeeId = Integer.toString(generateUniqueId());
        JTextFieldEmployeeNum.setText(newEmployeeId);
        textFieldEditSetting(true);
        JTextFieldEmployeeNum.setEditable(false);
        
        // Set up phone number validation for new entries
        JTextFieldPhone.setEditable(true);
        setupPhoneNumberValidation();
    
    }//GEN-LAST:event_AddActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        textFieldEditSetting(true);
    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
// Get the selected row index
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();
        
        // Check if a row is actually selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select an employee to delete first.", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Ask for confirmation
        int response = JOptionPane.showConfirmDialog(this, 
            "Do you want to proceed with deleting the entry?",
            "Delete Entry Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        // If user confirms deletion
        if (response == JOptionPane.YES_OPTION) {
            try {
                // Get the table model
                DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
                
                // Get employee info for confirmation message
                String empNum = model.getValueAt(selectedRowIndex, 0).toString();
                String empName = model.getValueAt(selectedRowIndex, 1).toString() + ", " + 
                                model.getValueAt(selectedRowIndex, 2).toString();
                
                // Remove the row
                model.removeRow(selectedRowIndex);
                
                // Show success message with employee details
                JOptionPane.showMessageDialog(this, 
                    "Employee " + empNum + " (" + empName + ") deleted successfully",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                
                // Clear the text fields after deletion
                clearTextField();
            } catch (HeadlessException e) {
                // Log and show error if deletion fails
                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, 
                    "Error deleting employee", e);
                JOptionPane.showMessageDialog(this, 
                    "Failed to delete employee: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Reset the text field edit settings
        textFieldEditSetting(false);
    
    }//GEN-LAST:event_DeleteActionPerformed

    private void UpdateDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateDatabaseActionPerformed
           int response = JOptionPane.showConfirmDialog(null, "Do you want to proceed with saving the changes to the database?",
            "Update Database Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            FileHandling.exportTableToCSV(jTableEmployeeList);
        }
    
    }//GEN-LAST:event_UpdateDatabaseActionPerformed

    private void ViewEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewEmployeeActionPerformed
    DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select an employee from the list first.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Check if the necessary files exist before creating the PayrollProcessing frame
            File employeeHoursFile = new File("Employee_Hours_Worked.csv");
            if (!employeeHoursFile.exists()) {
                // Create the parent directory if it doesn't exist
                employeeHoursFile.getParentFile().mkdirs();

                // Create an empty CSV file with headers
                try (CSVWriter writer = new CSVWriter(new FileWriter(employeeHoursFile))) {
                    String[] headers = {"employeeNumber", "date", "timeIn", "timeOut", "hoursWorked"};
                    writer.writeNext(headers);
                    System.out.println("Created Employee_Hours_Worked.csv file");
                }
            }

            // Now try to create the PayrollProcessing frame
            Finance_HR_PayrollProcessing viewEmployeeFrame = new Finance_HR_PayrollProcessing();

            // Display the window
            viewEmployeeFrame.setVisible(true);
            viewEmployeeFrame.pack();
            viewEmployeeFrame.setDefaultCloseOperation(Finance_HR_PayrollProcessing.DISPOSE_ON_CLOSE);

            // Display the data in viewEmployeeFrame
            viewEmployeeFrame.jTextFieldEmployeeNum.setText(model.getValueAt(selectedRowIndex, 0).toString());
            viewEmployeeFrame.jTextFieldLastName.setText(model.getValueAt(selectedRowIndex, 1).toString());
            viewEmployeeFrame.jTextFieldFirstName.setText(model.getValueAt(selectedRowIndex, 2).toString());
            viewEmployeeFrame.jTextFieldBasicSalary.setText(model.getValueAt(selectedRowIndex, 13).toString());

            //Benefits
            try {
                double riceSubsidy = Double.parseDouble(model.getValueAt(selectedRowIndex, 14).toString());
                double phoneAllowance = Double.parseDouble(model.getValueAt(selectedRowIndex, 15).toString());
                double clothingAllowance = Double.parseDouble(model.getValueAt(selectedRowIndex, 16).toString());
                double totalBenefits = riceSubsidy + phoneAllowance + clothingAllowance;
                String formattedTotalBenefits = String.format("%.2f", totalBenefits);
                viewEmployeeFrame.jTextFieldBenefits.setText(formattedTotalBenefits);
            } catch (NumberFormatException e) {
                // Handle case where benefits data is not valid numbers
                viewEmployeeFrame.jTextFieldBenefits.setText("0.00");
                System.err.println("Error calculating benefits: " + e.getMessage());
            }

        } catch (FileNotFoundException | CsvException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Error loading employee data: " + ex.getMessage(),
                "Data Error",
                JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "I/O Error: " + ex.getMessage(),
                "File Error",
                JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ViewEmployeeActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
 // First check if all fields are filled properly
        if (!checkEntries()) {
            return;  // If any field is empty, stop the save action
        }
        
        // Specific validation for phone number if it's editable
        if (JTextFieldPhone.isEditable()) {
            String phoneNumber = JTextFieldPhone.getText().trim();
            if (phoneNumber.length() != 11) {
                JOptionPane.showMessageDialog(this, 
                    "Phone number must be exactly 11 digits.", 
                    "Validation Error", 
                    JOptionPane.ERROR_MESSAGE);
                JTextFieldPhone.requestFocus();
                return;
            }
        }
        
        // Continue with the existing save logic
        ArrayList<Integer> list = new ArrayList<>();
        int rowCount = jTableEmployeeList.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            list.add(Integer.valueOf(jTableEmployeeList.getValueAt(i, 0).toString()));
        }
        
        int employeeNum = Integer.parseInt(JTextFieldEmployeeNum.getText());
        if (list.contains(employeeNum)) {
            updateEmployee();
        } else {
            addEmployee();
        }
        
        // Make the phone number field non-editable again after saving
        JTextFieldPhone.setEditable(false);
        textFieldEditSetting(false);

    }//GEN-LAST:event_SaveActionPerformed

    private void LeaveApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeaveApplicationActionPerformed
         try {
            HR_LeaveApplication leaveEmployee = new HR_LeaveApplication ();
            
            // Display the window
            leaveEmployee.setVisible(true);
            leaveEmployee.pack();
            leaveEmployee.setDefaultCloseOperation(Finance_HR_PayrollProcessing.DISPOSE_ON_CLOSE);

        } catch (IOException | CsvException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, 
                "Error opening Leave Application: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    
    }//GEN-LAST:event_LeaveApplicationActionPerformed

    private void SignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignOutActionPerformed

        // Sign Out button - Return to Login Manager
    int response = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to sign out?",
        "Confirm Sign Out",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE
    );
    
    if (response == JOptionPane.YES_OPTION) {
        WindowUtils.switchToWindow(this, new LoginManager());
    }


    }//GEN-LAST:event_SignOutActionPerformed

    private void ResetAttemptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetAttemptsActionPerformed
int selectedRow = jTableEmployeeList.getSelectedRow();
        
        if (selectedRow >= 0) {
            // Assuming the username is the same as lastName (adjust as needed)
            String lastName = jTableEmployeeList.getValueAt(selectedRow, 1).toString().toLowerCase();
            
            // Confirm before resetting
            int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to reset sign-in attempts for " + lastName + "?",
                "Confirm Reset", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
                
            if (response == JOptionPane.YES_OPTION) {
                resetLoginAttemptsForUser(lastName);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                "Please select an employee first",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
        }
    
    }//GEN-LAST:event_ResetAttemptsActionPerformed

    private void DashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DashboardActionPerformed
        try {
            showDashboard();
        } catch (IOException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CsvException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    resetButtonColors();
    Dashboard.setBackground(new Color(0, 204, 102));
    Dashboard.setForeground(Color.WHITE);
    }//GEN-LAST:event_DashboardActionPerformed

    private void UserManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserManagementActionPerformed
   
    }//GEN-LAST:event_UserManagementActionPerformed

    private void JTextFieldStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldStatusActionPerformed

    private void JTextFieldEmployeeNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldEmployeeNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldEmployeeNumActionPerformed

    private void JTextFieldEmployeeNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldEmployeeNumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_JTextFieldEmployeeNumKeyTyped

    private void JTextFieldLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldLastNameActionPerformed

    private void JTextFieldSSSnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldSSSnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldSSSnumActionPerformed

    private void JTextFieldSSSnumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldSSSnumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_JTextFieldSSSnumKeyTyped

    private void JTextFieldPagibigNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldPagibigNumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_JTextFieldPagibigNumKeyTyped

    private void JTextFieldTINnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldTINnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldTINnumActionPerformed

    private void JTextFieldTINnumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldTINnumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_JTextFieldTINnumKeyTyped

    private void JTextFieldPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldPhoneActionPerformed

    private void JTextFieldPhilhealthNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldPhilhealthNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldPhilhealthNumActionPerformed

    private void JTextFieldPhilhealthNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldPhilhealthNumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_JTextFieldPhilhealthNumKeyTyped

    private void JTextFieldSupervisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldSupervisorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldSupervisorActionPerformed

    private void JTextFieldRiceSubsidyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldRiceSubsidyKeyTyped
        // TODO add your handling code here:

        allowOnlyDigits(evt);
    }//GEN-LAST:event_JTextFieldRiceSubsidyKeyTyped

    private void JTextFieldPhoneAllowKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldPhoneAllowKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_JTextFieldPhoneAllowKeyTyped

    private void JTextFieldClothAllowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldClothAllowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldClothAllowActionPerformed

    private void JTextFieldClothAllowKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldClothAllowKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_JTextFieldClothAllowKeyTyped

    private void JTextFieldBasicSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldBasicSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldBasicSalaryActionPerformed

    private void JTextFieldBasicSalaryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldBasicSalaryKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_JTextFieldBasicSalaryKeyTyped

    private void JTextFieldFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldFirstNameActionPerformed

    private void JTextFieldPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextFieldPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextFieldPositionActionPerformed

    private void JDateChooserBirthdayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JDateChooserBirthdayKeyTyped
        // TODO add your handling code here:
        allowOnlyDate(evt);
    }//GEN-LAST:event_JDateChooserBirthdayKeyTyped

    private void jTableEmployeeList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmployeeList1MouseClicked
        textFieldEditSetting(false);

        DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();
        
        if (selectedRowIndex >= 0) {
            Object birthday = model.getValueAt(selectedRowIndex, 3);
            Date birthday_ = convertToDate(birthday);
            JTextFieldEmployeeNum.setText(model.getValueAt(selectedRowIndex, 0).toString());
            JTextFieldLastName.setText(model.getValueAt(selectedRowIndex, 1).toString());
            JTextFieldFirstName.setText(model.getValueAt(selectedRowIndex, 2).toString());
            JDateChooserBirthday.setDate(birthday_);
            JTextAreaAddress.setText(model.getValueAt(selectedRowIndex, 4).toString());
            JTextFieldPhone.setText(model.getValueAt(selectedRowIndex, 5).toString());
            JTextFieldSSSnum.setText(model.getValueAt(selectedRowIndex, 6).toString());
            JTextFieldPhilhealthNum.setText(model.getValueAt(selectedRowIndex, 7).toString());
            JTextFieldTINnum.setText(model.getValueAt(selectedRowIndex, 8).toString());
            JTextFieldPagibigNum.setText(model.getValueAt(selectedRowIndex, 9).toString());
            JTextFieldStatus.setText(model.getValueAt(selectedRowIndex, 10).toString());
            JTextFieldPosition.setText(model.getValueAt(selectedRowIndex, 11).toString());
            JTextFieldSupervisor.setText(model.getValueAt(selectedRowIndex, 12).toString());
            JTextFieldBasicSalary.setText(model.getValueAt(selectedRowIndex, 13).toString());
            JTextFieldRiceSubsidy.setText(model.getValueAt(selectedRowIndex, 14).toString());
            JTextFieldPhoneAllow.setText(model.getValueAt(selectedRowIndex, 15).toString());
            JTextFieldClothAllow.setText(model.getValueAt(selectedRowIndex, 16).toString());
        
}
    }//GEN-LAST:event_jTableEmployeeList1MouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked
    
    
    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
    /* ... */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            try {
                new UserManagement().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            } catch (CsvException ex) {
                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Dashboard;
    private javax.swing.JButton Delete;
    private com.toedter.calendar.JDateChooser JDateChooserBirthday;
    private javax.swing.JTextArea JTextAreaAddress;
    private javax.swing.JTextField JTextFieldBasicSalary;
    private javax.swing.JTextField JTextFieldClothAllow;
    private javax.swing.JTextField JTextFieldEmployeeNum;
    private javax.swing.JTextField JTextFieldFirstName;
    private javax.swing.JTextField JTextFieldLastName;
    private javax.swing.JTextField JTextFieldPagibigNum;
    private javax.swing.JTextField JTextFieldPhilhealthNum;
    private javax.swing.JTextField JTextFieldPhone;
    private javax.swing.JTextField JTextFieldPhoneAllow;
    private javax.swing.JTextField JTextFieldPosition;
    private javax.swing.JTextField JTextFieldRiceSubsidy;
    private javax.swing.JTextField JTextFieldSSSnum;
    private javax.swing.JTextField JTextFieldStatus;
    private javax.swing.JTextField JTextFieldSupervisor;
    private javax.swing.JTextField JTextFieldTINnum;
    private javax.swing.JButton LeaveApplication;
    private javax.swing.JLabel MainMenu;
    private javax.swing.JLabel MotorPH;
    private javax.swing.JButton ResetAttempts;
    private javax.swing.JButton Save;
    private javax.swing.JButton SignOut;
    private javax.swing.JButton Update;
    private javax.swing.JButton UpdateDatabase;
    private javax.swing.JButton UserManagement;
    private javax.swing.JButton ViewEmployee;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBasicSalary;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEmployeeList1;
    // End of variables declaration//GEN-END:variables
}
