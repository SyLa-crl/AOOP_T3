/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop_crud_payrollsystem;

/**
 *
 * @author Sylani
 */
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;
import java.awt.Color;
//import oop_t2_payroll.FileHandling;
//import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
public final class EmployeeProfile extends javax.swing.JFrame {
public EmployeeProfile() throws FileNotFoundException, IOException, CsvException {
        initComponents();
        String csvFile = "MotorPHEmployeeData.csv";

        csvRun(csvFile);
        textFieldEditSetting(false);
//        setIconImage(); //Icon Setting 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldStatus = new javax.swing.JTextField();
        jTextFieldEmployeeNum = new javax.swing.JTextField();
        jTextFieldLastName = new javax.swing.JTextField();
        jTextFieldSSSnum = new javax.swing.JTextField();
        jTextFieldPagibigNum = new javax.swing.JTextField();
        jTextFieldTINnum = new javax.swing.JTextField();
        jTextFieldPhoneNum = new javax.swing.JTextField();
        jTextFieldPhilhealthNum = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldSupervisor = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldRiceSubsidy = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldPhoneAllow = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldClothAllow = new javax.swing.JTextField();
        jTextFieldBasicSalary = new javax.swing.JTextField();
        jLabelBasicSalary = new javax.swing.JLabel();
        jTextFieldFirstName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaAddress = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldPosition = new javax.swing.JTextField();
        jDateChooserBirthday = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEmployeeList = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonClear = new javax.swing.JButton();
        jButtonProfileAdd = new javax.swing.JButton();
        jButtonProfileUpdate = new javax.swing.JButton();
        jButtonProfileDelete = new javax.swing.JButton();
        jButtonUpdateDBS = new javax.swing.JButton();
        jButtonViewEmployee = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonLeaveApplication = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButtonResetLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255, 0));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(1037, 364));
        jPanel1.setPreferredSize(new java.awt.Dimension(1037, 364));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Status");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 13, -1, 22));

        jLabel3.setText("Employee No.");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 43, -1, -1));

        jLabel4.setText("Last Name");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 13, -1, -1));

        jLabel6.setText("Birthday");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 103, -1, -1));

        jLabel7.setText("SSS No.");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 43, -1, -1));

        jLabel8.setText("Phone Number");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 73, -1, -1));

        jLabel9.setText("PhilHealth No.");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 73, -1, -1));

        jLabel10.setText("TIN");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 13, -1, -1));

        jLabel11.setText("Pagibig No.");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 103, -1, -1));

        jTextFieldStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldStatus.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStatusActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFieldStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 10, 190, 22));

        jTextFieldEmployeeNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldEmployeeNum.setCaretColor(new java.awt.Color(51, 51, 51));
        jTextFieldEmployeeNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldEmployeeNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEmployeeNumActionPerformed(evt);
            }
        });
        jTextFieldEmployeeNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEmployeeNumKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldEmployeeNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 40, 190, 22));

        jTextFieldLastName.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldLastName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLastNameActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFieldLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 190, 22));

        jTextFieldSSSnum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldSSSnum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldSSSnum.setName(""); // NOI18N
        jTextFieldSSSnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSSSnumActionPerformed(evt);
            }
        });
        jTextFieldSSSnum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSSSnumKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldSSSnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 40, 190, 22));

        jTextFieldPagibigNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldPagibigNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldPagibigNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPagibigNumKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldPagibigNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 100, 190, 22));

        jTextFieldTINnum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldTINnum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldTINnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTINnumActionPerformed(evt);
            }
        });
        jTextFieldTINnum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldTINnumKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldTINnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 10, 190, 22));

        jTextFieldPhoneNum.setEditable(false);
        jTextFieldPhoneNum.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldPhoneNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldPhoneNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldPhoneNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPhoneNumActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFieldPhoneNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 190, 22));

        jTextFieldPhilhealthNum.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldPhilhealthNum.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldPhilhealthNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPhilhealthNumActionPerformed(evt);
            }
        });
        jTextFieldPhilhealthNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPhilhealthNumKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldPhilhealthNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 70, 190, 22));

        jLabel14.setText("Immediate Supervisor");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 103, -1, -1));

        jTextFieldSupervisor.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldSupervisor.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldSupervisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSupervisorActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFieldSupervisor, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 100, 190, 22));

        jLabel15.setText("Rice Subsidy");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 253, -1, -1));

        jTextFieldRiceSubsidy.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldRiceSubsidy.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldRiceSubsidy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldRiceSubsidyKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldRiceSubsidy, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 190, 22));
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 372, -1, -1));

        jLabel17.setText("Phone Allowance");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 253, -1, -1));

        jTextFieldPhoneAllow.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldPhoneAllow.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldPhoneAllow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPhoneAllowKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldPhoneAllow, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 250, 190, 22));

        jLabel19.setText("Clothing  Allowance");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 253, -1, -1));

        jTextFieldClothAllow.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldClothAllow.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldClothAllow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClothAllowActionPerformed(evt);
            }
        });
        jTextFieldClothAllow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldClothAllowKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldClothAllow, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 250, 190, 22));

        jTextFieldBasicSalary.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldBasicSalary.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldBasicSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBasicSalaryActionPerformed(evt);
            }
        });
        jTextFieldBasicSalary.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldBasicSalaryKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldBasicSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, 190, 22));

        jLabelBasicSalary.setText("Basic Salary");
        jPanel1.add(jLabelBasicSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 223, -1, -1));

        jTextFieldFirstName.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldFirstName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFirstNameActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFieldFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 190, 22));

        jLabel5.setText("First Name");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 43, -1, -1));

        jLabel20.setText("Address");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 158, -1, -1));

        jTextAreaAddress.setColumns(20);
        jTextAreaAddress.setLineWrap(true);
        jTextAreaAddress.setRows(5);
        jTextAreaAddress.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextAreaAddress.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jScrollPane1.setViewportView(jTextAreaAddress);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 190, 56));

        jLabel18.setText("Positon");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 73, -1, -1));

        jTextFieldPosition.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jTextFieldPosition.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextFieldPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPositionActionPerformed(evt);
            }
        });
        jPanel1.add(jTextFieldPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(445, 70, 190, 22));

        jDateChooserBirthday.setBackground(new java.awt.Color(255, 255, 255));
        jDateChooserBirthday.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.gray));
        jDateChooserBirthday.setToolTipText("");
        jDateChooserBirthday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jDateChooserBirthdayKeyTyped(evt);
            }
        });
        jPanel1.add(jDateChooserBirthday, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 190, 30));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255, 0));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        jTableEmployeeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee", "Last Name", "First Name", "Birthday", "Address", "Phone Number", "SSS #", "Philhealth #", "TIN ", "Pag-ibig #", "Status", "Position", "Immediate Supervisor", "Basic Salary", "Rice Subsidy", "Phone Allowance", "Clothing Allowance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmployeeList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableEmployeeList.setAutoscrolls(false);
        jTableEmployeeList.getTableHeader().setReorderingAllowed(false);
        jTableEmployeeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmployeeListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEmployeeList);

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonClear.setText("CLEAR");
        jButtonClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 22));

        jButtonProfileAdd.setText("ADD");
        jButtonProfileAdd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonProfileAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProfileAddActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonProfileAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 64, 150, 22));

        jButtonProfileUpdate.setText("UPDATE");
        jButtonProfileUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonProfileUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProfileUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonProfileUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 37, 150, 22));

        jButtonProfileDelete.setText("DELETE");
        jButtonProfileDelete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonProfileDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProfileDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonProfileDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 91, 150, 22));

        jButtonUpdateDBS.setText("UPDATE DATABASE");
        jButtonUpdateDBS.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonUpdateDBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDBSActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonUpdateDBS, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 159, 150, 22));

        jButtonViewEmployee.setText("VIEW EMPLOYEE");
        jButtonViewEmployee.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonViewEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewEmployeeActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonViewEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 186, 150, 22));

        jButtonSave.setText("SAVE");
        jButtonSave.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 125, 150, 22));

        jButtonLeaveApplication.setText("LEAVE APPLICATION");
        jButtonLeaveApplication.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonLeaveApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeaveApplicationActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonLeaveApplication, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 213, 150, 22));

        jButtonExit.setText("EXIT");
        jButtonExit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 150, 22));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 0, 51));
        jLabel12.setText("* All fields are required.");

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));

        jButtonResetLogin.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jButtonResetLogin.setText("RESET LOGIN ATTEMPTS");
        jButtonResetLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jButtonResetLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonResetLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(1036, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(220, 220, 220)
                            .addComponent(jLabel12))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(218, 218, 218)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addComponent(jLabel12)
                            .addGap(4, 4, 4)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(7, 7, 7)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private void csvRun(String csvFile) throws FileNotFoundException, IOException, CsvException {
        List<String[]> records = FileHandling.readCSV(csvFile);
        List<Employee> employees = parseRecords(records);
        informationTable(employees);

    }

    // Method to parse records into Employee objects
    public static List<Employee> parseRecords(List<String[]> records) {
        List<Employee> employees = new ArrayList<>();
        for (String[] record : records) {
            String employeeNumber = record[0];
            String lastName = record[1];
            String firstName = record[2];
            String employeeBirthday = record[3];
            String address = record[4];
            String phoneNumber = record[5];
            String sssNumber = record[6];
            String philHealthNumber = record[7];
            String tinNumber = record[8];
            String pagIbigNumber = record[9];
            String status = record[10];
            String position = record[11];
            String immediateSupervisor = record[12];
            String basicSalary = record[13];
            String riceSubsidy = record[14];
            String phoneAllowance = record[15];
            String clothingAllowance = record[16];

            Employee employee = new Employee(employeeNumber, lastName, firstName, employeeBirthday, address, phoneNumber, sssNumber, philHealthNumber, tinNumber, pagIbigNumber, status, position, immediateSupervisor, basicSalary, riceSubsidy, phoneAllowance, clothingAllowance);
            employees.add(employee);
        }

        return employees;
    }
    /**
 * Converts various date formats to a Date object
 * 
 * @param dateObj The date object to be converted (String or Date)
 * @return A Date object representing the input
 */
public Date convertToDate(Object dateObj) {
    try {
        if (dateObj == null) {
            return null;
        }
        
        if (dateObj instanceof Date) {
            return (Date) dateObj;
        } else if (dateObj instanceof String) {
            String dateStr = ((String) dateObj).trim();
            if (dateStr.isEmpty()) {
                return null;
            }
            
            // Try different date formats that might be used in your application
            SimpleDateFormat[] formats = {
                new SimpleDateFormat("MM/dd/yyyy"),
                new SimpleDateFormat("yyyy-MM-dd"),
                new SimpleDateFormat("dd/MM/yyyy")
            };
            
            for (SimpleDateFormat format : formats) {
                try {
                    format.setLenient(false); // Strict parsing
                    return format.parse(dateStr);
                } catch (ParseException e) {
                    // Try the next format
                }
            }
            
            // If we get here, none of the formats worked
            JOptionPane.showMessageDialog(this, 
                "Could not parse date: " + dateStr, 
                "Date Format Error", 
                JOptionPane.ERROR_MESSAGE);
            return null;
        }
        
        JOptionPane.showMessageDialog(this, 
            "Unsupported date type: " + dateObj.getClass().getName(), 
            "Date Format Error", 
            JOptionPane.ERROR_MESSAGE);
        return null;
    } catch (Exception e) {
        Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, "Error converting date", e);
        JOptionPane.showMessageDialog(this, 
            "Error converting date: " + e.getMessage(), 
            "Date Error", 
            JOptionPane.ERROR_MESSAGE);
        return null;
    }
}

    private void informationTable(List<Employee> employees) {
        DefaultTableModel tableModel = (DefaultTableModel) jTableEmployeeList.getModel();
    tableModel.setRowCount(0); // Clear existing rows
    
    for (Employee employee : employees) {
        // Format the ID numbers to ensure they're displayed as full strings
        String sssFormatted = formatIdNumber(employee.getSssNumber());
        String philHealthFormatted = formatIdNumber(employee.getPhilHealthNumber());
        String tinFormatted = formatIdNumber(employee.getTinNumber());
        String pagIbigFormatted = formatIdNumber(employee.getPagIbigNumber());
        
        tableModel.addRow(new Object[]{
            employee.getEmployeeNumber(),
            employee.getLastName(),
            employee.getFirstName(),
            employee.getEmployeeBirthday(),
            employee.getAddress(),
            employee.getPhoneNumber(),
            sssFormatted,
            philHealthFormatted,
            tinFormatted,
            pagIbigFormatted,
            employee.getStatus(),
            employee.getPosition(),
            employee.getImmediateSupervisor(),
            employee.getBasicSalary(),
            employee.getRiceSubsidy(),
            employee.getPhoneAllowance(),
            employee.getClothingAllowance()}
        );
    }
}
    // Helper method to ensure ID numbers are displayed correctly
    private String formatIdNumber(String idNumber) {
    try {
        // If it can be parsed as a number, format it without scientific notation
        if (idNumber.matches(".*\\d.*")) {
            return String.format("%s", idNumber.replaceAll("[^0-9-]", ""));
        }
    } catch (Exception e) {
        // If any error occurs, just return the original string
    }
    return idNumber;
}

    public static void allowOnlyDigits(KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }

    public static void allowOnlyDigitsSpecial(KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '-') {
            evt.consume();
        }
    }

    public static void allowOnlyDate(KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '/' && c != '-' && c != '.') {
            evt.consume();
        }
    }

    public List<String> createTableIdList() {
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        List<String> tableIdList = new ArrayList<>();

        for (int i = 0; i < model.getRowCount(); i++) {
            String id = model.getValueAt(i, 0).toString();
            tableIdList.add(id);
        }
        return tableIdList;
    }

    public boolean isUniqueEmployeeId(List<String> tableIdList) {
        String newEmployeeId = jTextFieldEmployeeNum.getText().trim();

        for (int i = 0; i < tableIdList.size(); i++) {
            if (tableIdList.get(i).equals(newEmployeeId)) {
                JOptionPane.showMessageDialog(this, "ID number already exist");
                return false;
            }
        }

        return true;
    }

    public void addEmployee() {
        List<String> tableIdList = createTableIdList();
        boolean isUnique = isUniqueEmployeeId(tableIdList);

        if (isUnique) {
            DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();

            model.addRow(new Object[]{
                jTextFieldEmployeeNum.getText(),
                jTextFieldLastName.getText(),
                jTextFieldFirstName.getText(),
                formatDate(jDateChooserBirthday.getDate()),
                jTextAreaAddress.getText(),
                jTextFieldPhoneNum.getText(),
                jTextFieldSSSnum.getText(),
                jTextFieldPhilhealthNum.getText(),
                jTextFieldTINnum.getText(),
                jTextFieldPagibigNum.getText(),
                jTextFieldStatus.getText(),
                jTextFieldPosition.getText(),
                jTextFieldSupervisor.getText(),
                jTextFieldBasicSalary.getText(),
                jTextFieldRiceSubsidy.getText(),
                jTextFieldPhoneAllow.getText(),
                jTextFieldClothAllow.getText()});

            JOptionPane.showMessageDialog(this, "Employee added successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add employee", "Duplicate ID", JOptionPane.WARNING_MESSAGE);
        }

    }

    public void updateEmployee() {

        // Ask if user wants to proceed with updating the information of the employee
        int response = JOptionPane.showConfirmDialog(null, "Do you want to proceed with updating the entry?",
                "Update Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // JOptionPane returns: 1 = No, 0 = Yes
        // Check the user's response
        if (response == JOptionPane.YES_OPTION) {
            int selectedRowIndex = jTableEmployeeList.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();

            if (selectedRowIndex >= 0) {
                model.setValueAt(jTextFieldEmployeeNum.getText(), selectedRowIndex, 0);
                model.setValueAt(jTextFieldLastName.getText(), selectedRowIndex, 1);
                model.setValueAt(jTextFieldFirstName.getText(), selectedRowIndex, 2);
                model.setValueAt(formatDate(jDateChooserBirthday.getDate()), selectedRowIndex, 3);
                model.setValueAt(jTextAreaAddress.getText(), selectedRowIndex, 4);
                model.setValueAt(jTextFieldPhoneNum.getText(), selectedRowIndex, 5);
                model.setValueAt(jTextFieldSSSnum.getText(), selectedRowIndex, 6);
                model.setValueAt(jTextFieldPhilhealthNum.getText(), selectedRowIndex, 7);
                model.setValueAt(jTextFieldTINnum.getText(), selectedRowIndex, 8);
                model.setValueAt(jTextFieldPagibigNum.getText(), selectedRowIndex, 9);
                model.setValueAt(jTextFieldStatus.getText(), selectedRowIndex, 10);
                model.setValueAt(jTextFieldPosition.getText(), selectedRowIndex, 11);
                model.setValueAt(jTextFieldSupervisor.getText(), selectedRowIndex, 12);
                model.setValueAt(jTextFieldBasicSalary.getText(), selectedRowIndex, 13);
                model.setValueAt(jTextFieldRiceSubsidy.getText(), selectedRowIndex, 14);
                model.setValueAt(jTextFieldPhoneAllow.getText(), selectedRowIndex, 15);
                model.setValueAt(jTextFieldClothAllow.getText(), selectedRowIndex, 16);

                JOptionPane.showMessageDialog(this, "Employee information Updated successfully");

            } else {
                JOptionPane.showMessageDialog(null, "Error");
            }
        }
        // If "No" or dialog is closed, do nothing and exit the dialog

    }
    private void resetLoginAttemptsForUser(String username) {
    final String CSV_FILE = "login_attempts.csv";
    Map<String, Integer> userAttempts = new HashMap<>();
    
    // First load all current attempts
    try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE))) {
        String line;
        boolean isFirstLine = true;
        
        while ((line = reader.readLine()) != null) {
            // Skip the header
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }
            
            String[] parts = line.split(",");
            if (parts.length >= 2) {
                String user = parts[0];
                try {
                    int attempts = Integer.parseInt(parts[1]);
                    // Only keep users other than the one we're resetting
                    if (!user.equalsIgnoreCase(username)) {
                        userAttempts.put(user, attempts);
                    }
                } catch (NumberFormatException e) {
                    // Skip invalid entries
                }
            }
        }
    } catch (IOException e) {
        Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE,
            "Error reading login attempts file", e);
        return;
    }
    
    // Now write back the updated data
    try (FileWriter writer = new FileWriter(CSV_FILE, false)) { // Overwrite
        // Write header
        writer.write("username,attempts\n");
        
        // Write data
        for (Map.Entry<String, Integer> entry : userAttempts.entrySet()) {
            writer.write(entry.getKey() + "," + entry.getValue() + "\n");
        }
        
        JOptionPane.showMessageDialog(this, 
            "Login attempts reset for user: " + username, 
            "Reset Successful", 
            JOptionPane.INFORMATION_MESSAGE);
            
    } catch (IOException e) {
        Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE,
            "Failed to save login attempts", e);
        JOptionPane.showMessageDialog(this, 
            "Failed to reset login attempts: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }
}

    public int determineLastEmployeeId() {

        ArrayList<Integer> list = new ArrayList<>();
        int rowCount = jTableEmployeeList.getRowCount();
        int lastNumber = 0;

        for (int i = 0; i < rowCount; i++) {
            list.add(Integer.valueOf(jTableEmployeeList.getValueAt(i, 0).toString()));
        }

        // Sorting the ArrayList in descending order
        Collections.sort(list, Collections.reverseOrder());

        lastNumber = list.get(0);

        return lastNumber;
    }

    public int generateUniqueId() {
        int lastEmployeeID = determineLastEmployeeId();
        int newEmployeeId = lastEmployeeID + 1;

        return newEmployeeId;
    }

    public void clearTextField() {
        jTextFieldStatus.setText("");
        jTextFieldEmployeeNum.setText("");
        jTextFieldLastName.setText("");
        jTextFieldFirstName.setText("");
        jDateChooserBirthday.setDate(null);
        jTextFieldPhoneNum.setText("");
        jTextAreaAddress.setText("");

        jTextFieldPosition.setText("");
        jTextFieldSupervisor.setText("");

        jTextFieldSSSnum.setText("");
        jTextFieldPhilhealthNum.setText("");
        jTextFieldPagibigNum.setText("");
        jTextFieldTINnum.setText("");

        jTextFieldBasicSalary.setText("");
        jTextFieldRiceSubsidy.setText("");
        jTextFieldPhoneAllow.setText("");
        jTextFieldClothAllow.setText("");
    }

    public void textFieldEditSetting(boolean condition) {
        jTextFieldEmployeeNum.setEnabled(false);
        jTextFieldLastName.setEnabled(condition);
        jTextFieldFirstName.setEnabled(condition);
        jDateChooserBirthday.setEnabled(condition);
        jTextAreaAddress.setEnabled(condition);
        jTextFieldPhoneNum.setEnabled(condition);     
        jTextFieldSSSnum.setEnabled(condition);
        jTextFieldPhilhealthNum.setEnabled(condition);
        jTextFieldTINnum.setEnabled(condition);
        jTextFieldPagibigNum.setEnabled(condition);
        jTextFieldStatus.setEnabled(condition);
        jTextFieldPosition.setEnabled(condition);
        jTextFieldSupervisor.setEnabled(condition);
        jTextFieldBasicSalary.setEnabled(condition);
        jTextFieldRiceSubsidy.setEnabled(condition);
        jTextFieldPhoneAllow.setEnabled(condition);
        jTextFieldClothAllow.setEnabled(condition);

        JTextField dateEditor = (JTextField) jDateChooserBirthday.getDateEditor().getUiComponent();
        dateEditor.setDisabledTextColor(Color.BLACK);

        jTextFieldEmployeeNum.setDisabledTextColor(Color.BLACK);
        jTextFieldLastName.setDisabledTextColor(Color.BLACK);
        jTextFieldFirstName.setDisabledTextColor(Color.BLACK);
        jTextAreaAddress.setDisabledTextColor(Color.BLACK);
        jTextFieldPhoneNum.setDisabledTextColor(Color.BLACK);
        jTextFieldSSSnum.setDisabledTextColor(Color.BLACK);
        jTextFieldPhilhealthNum.setDisabledTextColor(Color.BLACK);
        jTextFieldTINnum.setDisabledTextColor(Color.BLACK);
        jTextFieldPagibigNum.setDisabledTextColor(Color.BLACK);
        jTextFieldStatus.setDisabledTextColor(Color.BLACK);
        jTextFieldPosition.setDisabledTextColor(Color.BLACK);
        jTextFieldSupervisor.setDisabledTextColor(Color.BLACK);
        jTextFieldBasicSalary.setDisabledTextColor(Color.BLACK);
        jTextFieldRiceSubsidy.setDisabledTextColor(Color.BLACK);
        jTextFieldPhoneAllow.setDisabledTextColor(Color.BLACK);
        jTextFieldClothAllow.setDisabledTextColor(Color.BLACK);

    }

    private boolean checkEntries() {
        if (isEmpty(jTextAreaAddress.getText())
                || isEmpty(jTextFieldBasicSalary.getText())
                || isEmpty(formatDate(jDateChooserBirthday.getDate()))
                || isEmpty(jTextFieldClothAllow.getText())
                || isEmpty(jTextFieldEmployeeNum.getText())
                || isEmpty(jTextFieldFirstName.getText())
                || isEmpty(jTextFieldLastName.getText())
                || isEmpty(jTextFieldPagibigNum.getText())
                || isEmpty(jTextFieldPhilhealthNum.getText())
                || isEmpty(jTextFieldPhoneAllow.getText())
                || isEmpty(jTextFieldPhoneNum.getText())
                || isEmpty(jTextFieldPosition.getText())
                || isEmpty(jTextFieldRiceSubsidy.getText())
                || isEmpty(jTextFieldSSSnum.getText())
                || isEmpty(jTextFieldStatus.getText())
                || isEmpty(jTextFieldSupervisor.getText())
                || isEmpty(jTextFieldTINnum.getText())) {

            JOptionPane.showMessageDialog(null, "All fields must be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            return false; // Indicate that not all fields are filled
        }
        return true; // Indicate that all fields are filled
    }

    public boolean isEmpty(String text) {
        return text.trim().isEmpty();
    }

    public static String formatDate(Date date) {
        if (date == null) {
            return "";
        }
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        return dateFormat.format(date);
        
        
    }
    private void setupPhoneNumberValidation() {
    // Set document filter to allow only digits and max 11 characters
    ((javax.swing.text.AbstractDocument) jTextFieldPhoneNum.getDocument()).setDocumentFilter(
        new javax.swing.text.DocumentFilter() {
            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, javax.swing.text.AttributeSet attrs) throws BadLocationException {
                String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = currentText.substring(0, offset) + text + currentText.substring(offset + length);
                
                // Only allow digits
                if (!text.matches("\\d*")) {
                    return;
                }
                
                // Check if the new length would be <= 11
                if (newText.length() <= 11) {
                    super.replace(fb, offset, length, text, attrs);
                }
            }
            
            @Override
            public void insertString(FilterBypass fb, int offset, String text, javax.swing.text.AttributeSet attr) throws BadLocationException {
                String currentText = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = currentText.substring(0, offset) + text + currentText.substring(offset);
                
                // Only allow digits
                if (!text.matches("\\d*")) {
                    return;
                }
                
                // Check if the new length would be <= 11
                if (newText.length() <= 11) {
                    super.insertString(fb, offset, text, attr);
                }
            }
        }
    );
    
    // Add an input verifier to check for exactly 11 digits when focus is lost
    jTextFieldPhoneNum.setInputVerifier(new javax.swing.InputVerifier() {
        @Override
        public boolean verify(javax.swing.JComponent input) {
            JTextField field = (JTextField) input;
            String text = field.getText();
            
            if (!text.isEmpty() && text.length() != 11) {
                JOptionPane.showMessageDialog(
                    null,
                    "Phone number must be exactly 11 digits.",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE
                );
                return false;
            }
            return true;
        }
    });
    
}
    
    private void jTextFieldStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStatusActionPerformed

    private void jTextFieldEmployeeNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEmployeeNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEmployeeNumActionPerformed

    private void jTextFieldEmployeeNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEmployeeNumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_jTextFieldEmployeeNumKeyTyped

    private void jTextFieldLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLastNameActionPerformed

    private void jTextFieldSSSnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSSSnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSSSnumActionPerformed

    private void jTextFieldSSSnumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSSSnumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_jTextFieldSSSnumKeyTyped

    private void jTextFieldPagibigNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPagibigNumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_jTextFieldPagibigNumKeyTyped

    private void jTextFieldTINnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTINnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTINnumActionPerformed

    private void jTextFieldTINnumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldTINnumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_jTextFieldTINnumKeyTyped

    private void jTextFieldPhoneNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPhoneNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPhoneNumActionPerformed

    private void jTextFieldPhilhealthNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPhilhealthNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPhilhealthNumActionPerformed

    private void jTextFieldPhilhealthNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhilhealthNumKeyTyped
        // TODO add your handling code here:
        allowOnlyDigitsSpecial(evt);
    }//GEN-LAST:event_jTextFieldPhilhealthNumKeyTyped

    private void jTextFieldSupervisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSupervisorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSupervisorActionPerformed

    private void jTextFieldRiceSubsidyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldRiceSubsidyKeyTyped
        // TODO add your handling code here:

        allowOnlyDigits(evt);
    }//GEN-LAST:event_jTextFieldRiceSubsidyKeyTyped

    private void jTextFieldPhoneAllowKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhoneAllowKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_jTextFieldPhoneAllowKeyTyped

    private void jTextFieldClothAllowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClothAllowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClothAllowActionPerformed

    private void jTextFieldClothAllowKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClothAllowKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_jTextFieldClothAllowKeyTyped

    private void jTextFieldBasicSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBasicSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldBasicSalaryActionPerformed

    private void jTextFieldBasicSalaryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBasicSalaryKeyTyped
        // TODO add your handling code here:
        allowOnlyDigits(evt);
    }//GEN-LAST:event_jTextFieldBasicSalaryKeyTyped

    private void jTextFieldFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFirstNameActionPerformed

    private void jTextFieldPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPositionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPositionActionPerformed

    private void jDateChooserBirthdayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateChooserBirthdayKeyTyped
        // TODO add your handling code here:
        allowOnlyDate(evt);
    }//GEN-LAST:event_jDateChooserBirthdayKeyTyped

    private void jTableEmployeeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmployeeListMouseClicked
        // TODO add your handling code here:

        textFieldEditSetting(false);

        DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();
        Object birthday = model.getValueAt(selectedRowIndex, 3);
        Date birthday_ = convertToDate(birthday);
        jTextFieldEmployeeNum.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jTextFieldLastName.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextFieldFirstName.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jDateChooserBirthday.setDate(birthday_);
        jTextAreaAddress.setText(model.getValueAt(selectedRowIndex, 4).toString());
        jTextFieldPhoneNum.setText(model.getValueAt(selectedRowIndex, 5).toString());
        jTextFieldSSSnum.setText(model.getValueAt(selectedRowIndex, 6).toString());
        jTextFieldPhilhealthNum.setText(model.getValueAt(selectedRowIndex, 7).toString());
        jTextFieldTINnum.setText(model.getValueAt(selectedRowIndex, 8).toString());
        jTextFieldPagibigNum.setText(model.getValueAt(selectedRowIndex, 9).toString());
        jTextFieldStatus.setText(model.getValueAt(selectedRowIndex, 10).toString());
        jTextFieldPosition.setText(model.getValueAt(selectedRowIndex, 11).toString());
        jTextFieldSupervisor.setText(model.getValueAt(selectedRowIndex, 12).toString());
        jTextFieldBasicSalary.setText(model.getValueAt(selectedRowIndex, 13).toString());
        jTextFieldRiceSubsidy.setText(model.getValueAt(selectedRowIndex, 14).toString());
        jTextFieldPhoneAllow.setText(model.getValueAt(selectedRowIndex, 15).toString());
        jTextFieldClothAllow.setText(model.getValueAt(selectedRowIndex, 16).toString());
    }//GEN-LAST:event_jTableEmployeeListMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        clearTextField();
        textFieldEditSetting(false);
         // Explicitly make phone number non-editable
        jTextFieldPhoneNum.setEditable(false);

    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonProfileAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProfileAddActionPerformed
    clearTextField();

    String newEmployeeId = Integer.toString(generateUniqueId());
    jTextFieldEmployeeNum.setText(newEmployeeId);

    textFieldEditSetting(true);
    jTextFieldEmployeeNum.setEditable(false);
    
    // Make phone number field editable and set up validation
    jTextFieldPhoneNum.setEditable(true);
    setupPhoneNumberValidation();
    }//GEN-LAST:event_jButtonProfileAddActionPerformed

    private void jButtonProfileUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProfileUpdateActionPerformed
        textFieldEditSetting(true);
    }//GEN-LAST:event_jButtonProfileUpdateActionPerformed

    private void jButtonProfileDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProfileDeleteActionPerformed

        int response = JOptionPane.showConfirmDialog(null, "Do you want to proceed with deleting the entry?",
            "Delete Entry Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            int selectedRowIndex = jTableEmployeeList.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
            model.removeRow(selectedRowIndex);

            JOptionPane.showMessageDialog(this, "Employee deleted successfully");
        }

        textFieldEditSetting(false);
    }//GEN-LAST:event_jButtonProfileDeleteActionPerformed

    private void jButtonUpdateDBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDBSActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(null, "Do you want to proceed with saving the changes to the database?",
            "Update Database Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            FileHandling.exportTableToCSV(jTableEmployeeList);
        }
    }//GEN-LAST:event_jButtonUpdateDBSActionPerformed

    private void jButtonViewEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewEmployeeActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeList.getModel();
        int selectedRowIndex = jTableEmployeeList.getSelectedRow();

        // Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this,
                "Please select an employee from the list first.",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Check if the necessary files exist before creating the PayrollProcessing frame
            File employeeHoursFile = new File("Employee_Hours_Worked.csv");
            if (!employeeHoursFile.exists()) {
                // Create the parent directory if it doesn't exist
                employeeHoursFile.getParentFile().mkdirs();

                // Create an empty CSV file with headers
                try (CSVWriter writer = new CSVWriter(new FileWriter(employeeHoursFile))) {
                    String[] headers = {"employeeNumber", "date", "timeIn", "timeOut", "hoursWorked"};
                    writer.writeNext(headers);
                    System.out.println("Created Employee_Hours_Worked.csv file");
                }
            }

            // Now try to create the PayrollProcessing frame
            PayrollProcessing viewEmployeeFrame = new PayrollProcessing();

            // Display the window
            viewEmployeeFrame.setVisible(true);
            viewEmployeeFrame.pack();
            viewEmployeeFrame.setDefaultCloseOperation(PayrollProcessing.DISPOSE_ON_CLOSE);

            // Display the data in viewEmployeeFrame
            viewEmployeeFrame.jTextFieldEmployeeNum.setText(model.getValueAt(selectedRowIndex, 0).toString());
            viewEmployeeFrame.jTextFieldLastName.setText(model.getValueAt(selectedRowIndex, 1).toString());
            viewEmployeeFrame.jTextFieldFirstName.setText(model.getValueAt(selectedRowIndex, 2).toString());
            viewEmployeeFrame.jTextFieldBasicSalary.setText(model.getValueAt(selectedRowIndex, 13).toString());

            //Benefits
            try {
                double riceSubsidy = Double.parseDouble(model.getValueAt(selectedRowIndex, 14).toString());
                double phoneAllowance = Double.parseDouble(model.getValueAt(selectedRowIndex, 15).toString());
                double clothingAllowance = Double.parseDouble(model.getValueAt(selectedRowIndex, 16).toString());
                double totalBenefits = riceSubsidy + phoneAllowance + clothingAllowance;
                String formattedTotalBenefits = String.format("%.2f", totalBenefits);
                viewEmployeeFrame.jTextFieldBenefits.setText(formattedTotalBenefits);
            } catch (NumberFormatException e) {
                // Handle case where benefits data is not valid numbers
                viewEmployeeFrame.jTextFieldBenefits.setText("0.00");
                System.err.println("Error calculating benefits: " + e.getMessage());
            }

        } catch (FileNotFoundException | CsvException ex) {
            Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Error loading employee data: " + ex.getMessage(),
                "Data Error",
                JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "I/O Error: " + ex.getMessage(),
                "File Error",
                JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Unexpected error: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonViewEmployeeActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

 // First check if all fields are filled properly
    if (!checkEntries()) {
        return;  // If any field is empty, stop the save action
    }
    
    // Add specific validation for phone number
    if (jTextFieldPhoneNum.isEditable()) {  // Only validate when it's an editable field (new employee)
        String phoneNumber = jTextFieldPhoneNum.getText().trim();
        if (phoneNumber.length() != 11) {
            JOptionPane.showMessageDialog(this, 
                "Phone number must be exactly 11 digits.", 
                "Validation Error", 
                JOptionPane.ERROR_MESSAGE);
            jTextFieldPhoneNum.requestFocus();
            return;
        }
    }
    
    // Continue with the existing save logic
    ArrayList<Integer> list = new ArrayList<>();
    int rowCount = jTableEmployeeList.getRowCount();
    for (int i = 0; i < rowCount; i++) {
        list.add(Integer.parseInt(jTableEmployeeList.getValueAt(i, 0).toString()));
    }
    
    int employeeNum = Integer.parseInt(jTextFieldEmployeeNum.getText());
    if (list.contains(employeeNum)) {
        updateEmployee();
    } else {
        addEmployee();
    }
    
    // Make the phone number field non-editable again after saving
    jTextFieldPhoneNum.setEditable(false);
    textFieldEditSetting(false);

    
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonLeaveApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeaveApplicationActionPerformed
        // TODO add your handling code here:
        try {
            LeaveApplicationAdmin leaveEmployee = null;
            try {
                leaveEmployee = new LeaveApplicationAdmin();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
            } catch (CsvException ex) {
                Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
            }
            // Display the window
            leaveEmployee.setVisible(true);
            leaveEmployee.pack();
            leaveEmployee.setDefaultCloseOperation(PayrollProcessing.DISPOSE_ON_CLOSE); //if viewEmployeeFrame is close, main frame will not close.

        } catch (IOException ex) {
            Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonLeaveApplicationActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
         // Confirm before exiting
    int response = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to exit?",
        "Confirm Exit",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);

    if (response == JOptionPane.YES_OPTION) {
        // Close the form
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed
    }
    private void jButtonResetLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetLoginActionPerformed
  // Get the username from the currently selected employee
    int selectedRow = jTableEmployeeList.getSelectedRow();
    
    if (selectedRow >= 0) {
        // Assuming the username is the same as lastName (adjust as needed)
        String lastName = jTableEmployeeList.getValueAt(selectedRow, 1).toString().toLowerCase();
        
        // Confirm before resetting
        int response = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to reset login attempts for " + lastName + "?",
            "Confirm Reset", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
            
        if (response == JOptionPane.YES_OPTION) {
            resetLoginAttemptsForUser(lastName);
        }
    } else {
        JOptionPane.showMessageDialog(this,
            "Please select an employee first",
            "No Selection",
            JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_jButtonResetLoginActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new EmployeeProfile().setVisible(true);
                } catch (IOException | CsvException ex) {
                    Logger.getLogger(EmployeeProfile.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonLeaveApplication;
    private javax.swing.JButton jButtonProfileAdd;
    private javax.swing.JButton jButtonProfileDelete;
    private javax.swing.JButton jButtonProfileUpdate;
    private javax.swing.JButton jButtonResetLogin;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonUpdateDBS;
    private javax.swing.JButton jButtonViewEmployee;
    private com.toedter.calendar.JDateChooser jDateChooserBirthday;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBasicSalary;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEmployeeList;
    private javax.swing.JTextArea jTextAreaAddress;
    private javax.swing.JTextField jTextFieldBasicSalary;
    private javax.swing.JTextField jTextFieldClothAllow;
    private javax.swing.JTextField jTextFieldEmployeeNum;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldPagibigNum;
    private javax.swing.JTextField jTextFieldPhilhealthNum;
    private javax.swing.JTextField jTextFieldPhoneAllow;
    private javax.swing.JTextField jTextFieldPhoneNum;
    private javax.swing.JTextField jTextFieldPosition;
    private javax.swing.JTextField jTextFieldRiceSubsidy;
    private javax.swing.JTextField jTextFieldSSSnum;
    private javax.swing.JTextField jTextFieldStatus;
    private javax.swing.JTextField jTextFieldSupervisor;
    private javax.swing.JTextField jTextFieldTINnum;
    // End of variables declaration//GEN-END:variables
}
